## 스택의 응용2 : function call
```
프로그램에서의 함수 호출과 복귀에 따른 수행 순서를 관리
 - 가장 마지막에 호출된 함수가 가장 먼저 실행을 왈료하고 복귀하는 후입선출 구조이므로, 후입선출 구조의 스택을 이용하여 수행순서 관리
  - 함수 호출이 발생하면 호출한 함수 수행에 필료한 지역변수, 매개변수 및 수행 후 복귀할 주소 등의 정보를 스택 프레임에 저장하여 시스템 스택에 삽입
   - 함수의 실행이 끝나면 시스템 스택의 top 원소를 삭제하면서 프레임에 저장되어 있던 복귀주소를 확인하고 복귀
    - 함수 호출과 복귀에 따라 이 과정을 반복하여 전체 프로그램 수행이 종료되면 시스템 스택은 공백 스택이 된다.

ex) main(), f_1(), f_2() 3 종류의 함수가 있다고 할 때
main()이 f_1()의 반환 값 이용 f_1()이 f_2()의 반환 값을 이용한다고 하면 
main() -> f_1()호출 -> f_2()호출 -> f_2()종료 -> f_1() 종료 -> main() 종료
```

## 재귀호출
```
자기 자신을 호출하여 순환 수행되는 것
함수에서 실행해야 하는 작업의 특성에 따라 일반적인 호출 방식보다 재귀호출방식을 사용하여 함수를 만들면 프로그램의 크기를 줄이고 간단하게 작성
ex) factorial
fact(4) = 4 * fact(3)
fact(3) = 3 * fact(2)
fact(2) = 2 * fact(1)
fact(1) = return 1

ex) 피보나치 
0과 1로 시작하고 이전의 두 수 합을 다음 항으로 하는 수열을 피보나치라 한다.
F(i) = F[i-1] + F[i-2] for i >= 2

def fibo(n):
  if n < 2:
    return n
  else:
    return fibo(n-1) + fibo(n-2)

이렇게  피보나치 수를 구하는 함수를 재귀함수로 구현한 알고리즘은 엄청난 중복 호출이 있다.
이러한 문제를 해결하기 위하여 메모이제이션 사용
```

## Memoization
```
메모이제이션은 컴퓨터 프로그램을 실행할 때 이전에 계산한 값을 메모리에 저장해서 매번 다시 계싼하지 않도록 하여 전체적인 실행속도를 빠르게 하는 기술.
ex) Memoization을 사용한 피보나치
memo = [0] * (n+1)
memo[0] = 0
memo[1] = 1
def fibo(n):
  global memo
  if n >= 2 and memo[n] == 0:
    memo[n] = (fibo(n-1) + fibo(n-2))
  return memo[n]
```
## DP(Dynamic Programming)
```
동적 계획 알고리즘은 그리디 알고리즘과 같이 최적화 문제를 해결하는 알고리즘이다.
동적 계획 알고리즘은 먼저 입력 크기가 작은 부분 문제들을 모두 해결한 후에 그 해들을 이용하여 보다 큰 크기의 부분 문제들을 해결하여 최종적으로 원래 주어진 입력의 문제를 해결하는 알고리즘

ex) 피보나치 수 DP 적용
- 피보나치 수는 부분 문제의 답으로부터 본 문제의 답을 얻을 수 있으므로 최적 부분 구조로 이루어여 있다.
 1) 문제를 부분 문제로 분할한다.
 Fibonacci(n) 함수는 Fibonacci(n-1)과 Fibonacci(n-2)의 합
 Fibonacci(n-1) 함수는 Fibonacci(n-2)과 Fibonacci(n-3)의 합
 Fibonacci(2) 함수는 Fibonacci(1)과 Fibonacci(0)의 합
 Fibonacci(n) 함수는 Fibonacci(n-1),Fibonacci(n-2).. .Fibonacci(0의 부분집합으로 나뉜다.
 2) 부분 문제로 나누는 일을 끝냈으면 가장 작은 부분 문제부터 해를 구한다.
 3) 그 결과는 테이블에 저장하괴, 그 테이블에 저장된 부분 문제의 해를 이용하여 상위 문제의 해를 구한다.

 def fibo(n):
  f = [0] * (n + 1)
  f[0] = 0
  f[1] = 1
  for i in range(2, n+1):
    f[i] = f[i-1] + f[i-2]

  return f[n]
```

## DFS(깊이우선탐색)
```
비선형구조인 그래프 구조는 그래프로 표현된 모든 자료를 빠짐없이 검색하는 것이 중요함
두가지 방법
 - 깊이 우선 탐색 (Depth First Search, DFS)
 - 너비 우선 탐색 (Breadth First Search, BFS)
```

## DFS(깊이우선탐색)
```
시작 정점의 한 방향으로 갈 수 있는 경로가 있는 곳까지 깊이 탐색해 가다가 더 이상 갈 곳이 없게 되면 가장 마지막에 만났던 갈림길 간성이 있는 정점으로 되돌아와서 다른 방햐으이 정점으로 탐색을 계쏙 반복하여 결국 모든 정점을 방문하는 순회방법

가장 마지막에 만났던 갈림길의 정점으로 되돌아가서 다시 깊이 우선 탐색을 반복해야 하므로 후입선출 구조의 스택 사용

1. 시작 정점 V를 결정하여 방문한다.
2. 정점 V에 인접한 정점 중에서
 1) 방문하지 않은 정점 W가 있으면, 정점 V를 스택에 PUSH하고 정점 w를 방문한다. 그리고 w를 v로하여 다시 2)를 반복한다.
 2) 방문하지 않은 정점이 없다면 탐색의 방향을 바꾸기 위해서 스택을 pop하여 받은 가장 마지막 방문 정점을 v로 하여 다시 2.를 반복
3. 스택이 공백이 될 때까지 2)를 반복한다.

def DFS(v):           # DFS 함수 선언
    visited[v] = True
    for i in graph[v]:
        if visited[i] == False:
            visited[i] = True
            DFS()
```

